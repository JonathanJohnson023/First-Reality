name: Feature Branch Deployment (Working)

on:
  push:
    branches: 
      - 'feature/**'
      - 'fix/**'

jobs:
  deploy-feature:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
        
    - name: Build project
      run: NODE_OPTIONS="--openssl-legacy-provider" npm run build
      
    - name: Verify build
      run: |
        if [ ! -f "dist/bundle.js" ]; then
          echo "‚ùå Build failed - bundle.js not found"
          exit 1
        fi
        echo "‚úÖ Build successful - Bundle size: $(du -h dist/bundle.js | cut -f1)"
        
    - name: Prepare deployment files
      run: |
        mkdir -p deploy
        cp index.html deploy/
        cp -r dist/ deploy/
        cp -r styles/ deploy/
        cp -r assets/ deploy/ || echo "Assets not found"
        cp *.png deploy/ || echo "PNG files not found"
        touch deploy/.nojekyll
        
        # Add feature branch banner
        sed -i 's|<body>|<body><div style="position:fixed;top:0;left:0;width:100%;background:#4CAF50;color:black;text-align:center;padding:8px;z-index:10000;font-weight:bold;font-family:Arial;">üåü FEATURE TESTING: ${{ github.ref_name }} üåü</div><div style="height:40px;"></div>|g' deploy/index.html
        
    - name: Deploy to GitHub Pages (Temporary Override)
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./deploy
        force_orphan: true
        enable_jekyll: false
        commit_message: "üß™ Feature testing: ${{ github.ref_name }}"
        
    - name: Wait for GitHub Pages
      run: |
        echo "‚è±Ô∏è Waiting for GitHub Pages deployment..."
        sleep 120
        
    - name: Verify deployment and test functionality
      run: |
        TEST_URL="https://jonathanjohnson023.github.io/First-Reality/"
        
        echo "üîç Testing deployment at: $TEST_URL"
        
        # Test HTTP status
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$TEST_URL")
        echo "HTTP Status: $HTTP_CODE"
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "‚úÖ Site loads successfully!"
          
          # Test content
          CONTENT=$(curl -s "$TEST_URL")
          
          # Check for volume controls
          if echo "$CONTENT" | grep -q "volume-controls"; then
            echo "‚úÖ Volume controls present"
          else
            echo "‚ùå Volume controls missing"
          fi
          
          # Check for press enter
          if echo "$CONTENT" | grep -q "Press Enter"; then
            echo "‚úÖ Press Enter screen present"
          else
            echo "‚ùå Press Enter screen missing"
          fi
          
          # Check for feature banner
          if echo "$CONTENT" | grep -q "${{ github.ref_name }}"; then
            echo "‚úÖ Feature branch banner present"
          else
            echo "‚ùå Feature branch banner missing"
          fi
          
          # Check bundle loads
          BUNDLE_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$TEST_URL/dist/bundle.js")
          if [ "$BUNDLE_CODE" = "200" ]; then
            echo "‚úÖ Bundle loads successfully"
          else
            echo "‚ùå Bundle failed to load - HTTP $BUNDLE_CODE"
          fi
          
          # Check CSS loads
          CSS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$TEST_URL/styles/css/app.css")
          if [ "$CSS_CODE" = "200" ]; then
            echo "‚úÖ CSS loads successfully"
          else
            echo "‚ùå CSS failed to load - HTTP $CSS_CODE"
          fi
          
          echo ""
          echo "üéÆ FEATURE TESTING READY!"
          echo "üîó Test URL: $TEST_URL"
          echo "‚ö†Ô∏è This temporarily overrides production for testing"
          echo "üîÑ Merge to dev/stage/master to restore proper environments"
          
        else
          echo "‚ùå Deployment verification failed - HTTP $HTTP_CODE"
          echo "üîÑ GitHub Pages may need more time to propagate"
          
          # Try one more time after additional wait
          echo "‚è±Ô∏è Waiting additional time..."
          sleep 180
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$TEST_URL")
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Deployment successful after extended wait!"
          else
            echo "‚ùå Deployment still failing after extended wait - HTTP $HTTP_CODE"
            echo "üîß Manual verification required"
          fi
        fi