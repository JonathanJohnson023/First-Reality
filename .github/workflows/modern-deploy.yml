name: Modern Multi-Environment Deployment

on:
  push:
    branches: [ master, dev, stage, 'feature/**', 'fix/**' ]
  pull_request:
    branches: [ dev, stage, master ]

jobs:
  # Build and test (runs on all branches)
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: NODE_OPTIONS="--openssl-legacy-provider" npm run build
      
    - name: Verify build
      run: |
        if [ ! -f "dist/bundle.js" ]; then
          echo "‚ùå Build failed"
          exit 1
        fi
        echo "‚úÖ Build successful - $(du -h dist/bundle.js | cut -f1)"

  # Production deployment (GitHub Pages)
  deploy-production:
    needs: build-and-test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build project
      run: NODE_OPTIONS="--openssl-legacy-provider" npm run build
      
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        exclude_assets: '.github,node_modules,src,tests,*.md,package*.json,webpack.config.js,.gitignore'
        force_orphan: true
        enable_jekyll: false
        commit_message: "üöÄ Production deployment"
        
    - name: Verify production
      run: |
        sleep 60
        echo "üéÆ Production: https://jonathanjohnson023.github.io/First-Reality/"

  # Netlify deployment for dev environment
  deploy-dev:
    needs: build-and-test
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build project
      run: NODE_OPTIONS="--openssl-legacy-provider" npm run build
      
    - name: Add dev banner
      run: |
        sed -i 's|<title>First Reality</title>|<title>First Reality - DEV</title>|g' index.html
        sed -i 's|<body>|<body><div style="position:fixed;top:0;left:0;width:100%;background:#ff9800;color:black;text-align:center;padding:8px;z-index:10000;font-weight:bold;">üîß DEV ENVIRONMENT üîß</div><div style="height:40px;"></div>|g' index.html
        
    - name: Deploy to Netlify (Dev)
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './'
        production-branch: dev
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "üîß Dev deployment - ${{ github.sha }}"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: false
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_DEV_SITE_ID }}

  # Vercel deployment for staging
  deploy-stage:
    needs: build-and-test
    if: github.ref == 'refs/heads/stage' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build project
      run: NODE_OPTIONS="--openssl-legacy-provider" npm run build
      
    - name: Add stage banner
      run: |
        sed -i 's|<title>First Reality</title>|<title>First Reality - STAGING</title>|g' index.html
        sed -i 's|<body>|<body><div style="position:fixed;top:0;left:0;width:100%;background:#2196F3;color:white;text-align:center;padding:8px;z-index:10000;font-weight:bold;">üöÄ STAGING ENVIRONMENT üöÄ</div><div style="height:40px;"></div>|g' index.html
        
    - name: Deploy to Vercel (Stage)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: ./

  # Surge.sh deployment for feature branches
  deploy-feature:
    needs: build-and-test
    if: startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/fix/')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build project
      run: NODE_OPTIONS="--openssl-legacy-provider" npm run build
      
    - name: Install Surge
      run: npm install -g surge
      
    - name: Add feature banner
      run: |
        sed -i 's|<title>First Reality</title>|<title>First Reality - ${{ github.ref_name }}</title>|g' index.html
        sed -i 's|<body>|<body><div style="position:fixed;top:0;left:0;width:100%;background:#4CAF50;color:black;text-align:center;padding:8px;z-index:10000;font-weight:bold;">üåü FEATURE: ${{ github.ref_name }} üåü</div><div style="height:40px;"></div>|g' index.html
        
    - name: Deploy to Surge.sh
      run: |
        # Create unique domain for this feature
        BRANCH_NAME="${{ github.ref_name }}"
        SAFE_BRANCH=$(echo "$BRANCH_NAME" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
        SURGE_DOMAIN="first-reality-${SAFE_BRANCH}.surge.sh"
        
        echo "üöÄ Deploying feature to: https://$SURGE_DOMAIN"
        
        # Deploy to Surge
        surge . "$SURGE_DOMAIN" --token ${{ secrets.SURGE_TOKEN }}
        
        echo "‚úÖ Feature deployed!"
        echo "üéÆ Test URL: https://$SURGE_DOMAIN"
        
    - name: Verify feature deployment
      run: |
        BRANCH_NAME="${{ github.ref_name }}"
        SAFE_BRANCH=$(echo "$BRANCH_NAME" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
        SURGE_DOMAIN="first-reality-${SAFE_BRANCH}.surge.sh"
        
        sleep 30
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://$SURGE_DOMAIN")
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "‚úÖ Feature deployment verified!"
          echo "üéÆ Working URL: https://$SURGE_DOMAIN"
        else
          echo "‚ö†Ô∏è Feature deployment pending (Surge propagation)"
          echo "üéÆ Try URL: https://$SURGE_DOMAIN"
        fi