name: Deploy Environments

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ dev, stage, master ]

jobs:
  # Production deployment (only on master push)
  deploy-production:
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Build project
      run: NODE_OPTIONS="--openssl-legacy-provider" npm run build
      
    - name: Deploy to production
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        exclude_assets: '.github,node_modules,src,tests,*.md,package*.json,webpack.config.js,.gitignore,TODOS.md,PR_TEMPLATE.md,check-pages-setup.js,build-ci.js'
        force_orphan: true
        enable_jekyll: false
        commit_message: "🚀 Production deployment"
        
    - name: Verify production deployment
      run: |
        sleep 60
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://jonathanjohnson023.github.io/First-Reality/")
        if [ "$HTTP_CODE" = "200" ]; then
          echo "✅ Production deployment successful!"
          echo "🎮 Live at: https://jonathanjohnson023.github.io/First-Reality/"
        else
          echo "❌ Production deployment verification failed"
        fi

  # Dev environment deployment (only when PR to dev is merged)
  deploy-dev:
    if: github.base_ref == 'dev' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: NODE_OPTIONS="--openssl-legacy-provider" npm run build
      
    - name: Prepare dev deployment
      run: |
        mkdir -p dev-deploy
        cp index.html dev-deploy/
        cp -r dist/ dev-deploy/
        cp -r styles/ dev-deploy/
        cp -r assets/ dev-deploy/ || echo "Assets not found"
        cp *.png dev-deploy/ || echo "PNG files not found"
        touch dev-deploy/.nojekyll
        
        # Add dev environment banner
        sed -i 's|<title>First Reality</title>|<title>First Reality - DEV</title>|g' dev-deploy/index.html
        sed -i 's|<body>|<body><div style="position:fixed;top:0;left:0;width:100%;background:#ff9800;color:black;text-align:center;padding:8px;z-index:10000;font-weight:bold;">🔧 DEV ENVIRONMENT 🔧</div><div style="height:40px;"></div>|g' dev-deploy/index.html
        
    - name: Deploy to dev environment  
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dev-deploy
        destination_dir: dev
        keep_files: true
        enable_jekyll: false
        commit_message: "🔧 Deploy to dev environment"

  # Stage environment deployment (only when PR to stage is merged)
  deploy-stage:
    if: github.base_ref == 'stage' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Run full test suite
      run: |
        npm test
        npm run test:unit || echo "Unit tests not implemented yet"
        npm run test:e2e || echo "E2E tests not implemented yet"
      
    - name: Build project
      run: NODE_OPTIONS="--openssl-legacy-provider" npm run build
      
    - name: Prepare stage deployment
      run: |
        mkdir -p stage-deploy
        cp index.html stage-deploy/
        cp -r dist/ stage-deploy/
        cp -r styles/ stage-deploy/
        cp -r assets/ stage-deploy/ || echo "Assets not found"
        cp *.png stage-deploy/ || echo "PNG files not found"
        touch stage-deploy/.nojekyll
        
        # Add stage environment banner
        sed -i 's|<title>First Reality</title>|<title>First Reality - STAGING</title>|g' stage-deploy/index.html
        sed -i 's|<body>|<body><div style="position:fixed;top:0;left:0;width:100%;background:#2196F3;color:white;text-align:center;padding:8px;z-index:10000;font-weight:bold;">🚀 STAGING ENVIRONMENT 🚀</div><div style="height:40px;"></div>|g' stage-deploy/index.html
        
    - name: Deploy to stage environment
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./stage-deploy
        destination_dir: stage  
        keep_files: true
        enable_jekyll: false
        commit_message: "🚀 Deploy to stage environment"

  # PR build verification (runs on all PRs but doesn't deploy)
  verify-build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm install --legacy-peer-deps
      
    - name: Run tests
      run: npm test
      
    - name: Build project
      run: NODE_OPTIONS="--openssl-legacy-provider" npm run build
      
    - name: Verify build output
      run: |
        if [ ! -f "dist/bundle.js" ]; then
          echo "❌ Build failed - bundle.js not found"
          exit 1
        fi
        
        echo "✅ Build verification successful"
        echo "Bundle size: $(du -h dist/bundle.js | cut -f1)"
        
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const bundleSize = fs.statSync('dist/bundle.js').size;
          const bundleSizeKB = Math.round(bundleSize / 1024 * 10) / 10;
          
          const targetEnv = context.payload.pull_request.base.ref;
          const envUrls = {
            'dev': 'https://jonathanjohnson023.github.io/First-Reality/dev/',
            'stage': 'https://jonathanjohnson023.github.io/First-Reality/stage/', 
            'master': 'https://jonathanjohnson023.github.io/First-Reality/'
          };
          
          const comment = \`## ✅ Build Verification Complete!
          
          ### 📊 Build Status
          - **Status**: SUCCESS ✅
          - **Bundle Size**: \${bundleSizeKB}KB
          - **Target**: \${targetEnv} environment
          
          ### 🚀 When Merged
          **Will deploy to**: \${envUrls[targetEnv] || 'Unknown environment'}
          
          ### 🔧 Verification Checklist
          - [ ] JavaScript builds without errors ✅
          - [ ] Bundle size acceptable ✅
          - [ ] Tests pass ✅
          - [ ] Ready for \${targetEnv} deployment ✅
          
          **Merge when ready to deploy to \${targetEnv}!** 🚀\`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });