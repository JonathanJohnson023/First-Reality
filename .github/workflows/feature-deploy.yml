name: 🌟 Feature Branch Auto-Deploy

on:
  push:
    branches: 
      - 'feature/**'
      - 'fix/**'
      - 'hotfix/**'

jobs:
  deploy-feature:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📋 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js Environment  
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 🔧 Install Dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm cache clean --force
        npm install --legacy-peer-deps
        echo "✅ Dependencies installed successfully"
        
    - name: 🧪 Run Tests
      run: |
        echo "🧪 Running test suite..."
        npm test
        echo "✅ All tests passed"
        
    - name: 🔨 Build Project
      run: |
        echo "🔨 Building project for feature branch: ${{ github.ref_name }}"
        NODE_OPTIONS="--openssl-legacy-provider" npm run build
        echo "✅ Build completed successfully"
        
    - name: 📊 Verify Build Output
      run: |
        echo "📊 Build verification:"
        if [ ! -f "dist/bundle.js" ]; then
          echo "❌ Build failed - bundle.js not found"
          exit 1
        fi
        
        BUNDLE_SIZE=$(du -h dist/bundle.js | cut -f1)
        echo "✅ Bundle created: $BUNDLE_SIZE"
        
        echo "📁 Build artifacts:"
        ls -la dist/
        
        echo "📋 Deployment files ready:"
        echo "- index.html: $(du -h index.html | cut -f1)"
        echo "- dist/bundle.js: $BUNDLE_SIZE"
        echo "- styles/: $(du -sh styles/ | cut -f1)"
        echo "- assets/: $(du -sh assets/ 2>/dev/null | cut -f1 || echo 'Not found')"
        
    - name: 🏷️ Add Feature Branch Identifier
      run: |
        echo "🏷️ Adding feature branch identifier..."
        
        # Add feature banner (small, clean)
        sed -i 's|<body>|<body><div style="position:fixed;top:0;left:0;width:100%;background:#4CAF50;color:black;text-align:center;padding:4px;z-index:10000;font-size:12px;font-weight:bold;">🌟 FEATURE: ${{ github.ref_name }} 🌟</div><div style="height:25px;"></div>|g' index.html
        
        # Update title
        sed -i 's|<title>First Reality</title>|<title>First Reality - ${{ github.ref_name }}</title>|g' index.html
        
        echo "✅ Feature identifier added"
        
    - name: 🚀 Deploy to Netlify
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './'
        production-branch: master
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "🌟 Feature deploy: ${{ github.ref_name }} - ${{ github.sha }}"
        enable-pull-request-comment: false
        enable-commit-comment: false
        overwrites-pull-request-comment: false
        alias: ${{ github.ref_name }}
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        
    - name: 🔍 Verify Feature Deployment
      run: |
        echo "🔍 Verifying feature deployment..."
        
        # Generate expected URL
        BRANCH_NAME="${{ github.ref_name }}"
        SAFE_BRANCH=$(echo "$BRANCH_NAME" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
        FEATURE_URL="https://${SAFE_BRANCH}--first-reality.netlify.app/"
        
        echo "🎯 Expected URL: $FEATURE_URL"
        echo "⏱️ Waiting for Netlify deployment to complete..."
        
        # Wait for deployment
        sleep 60
        
        # Test deployment
        echo "🔍 Testing deployment..."
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$FEATURE_URL" || echo "000")
        
        if [ "$HTTP_CODE" = "200" ]; then
          echo "✅ Feature deployment successful!"
          echo "🎮 Live URL: $FEATURE_URL"
          
          # Test key components
          CONTENT=$(curl -s "$FEATURE_URL" 2>/dev/null || echo "")
          
          if echo "$CONTENT" | grep -q "volume-controls"; then
            echo "✅ Volume controls deployed"
          else
            echo "⚠️ Volume controls not found"
          fi
          
          if echo "$CONTENT" | grep -q "Press Enter"; then
            echo "✅ Title screen deployed"
          else
            echo "⚠️ Title screen not found"
          fi
          
          # Test bundle
          BUNDLE_CODE=$(curl -s -o /dev/null -w "%{http_code}" "${FEATURE_URL}dist/bundle.js" || echo "000")
          if [ "$BUNDLE_CODE" = "200" ]; then
            echo "✅ Game bundle loads correctly"
          else
            echo "⚠️ Game bundle issue - HTTP $BUNDLE_CODE"
          fi
          
        else
          echo "⚠️ Deployment still propagating - HTTP $HTTP_CODE"
          echo "🔄 Try URL in 2-3 minutes: $FEATURE_URL"
        fi
        
        echo ""
        echo "🎮 FEATURE TESTING READY!"
        echo "🔗 URL: $FEATURE_URL"
        echo "📝 Test checklist:"
        echo "  - [ ] Game loads without errors"
        echo "  - [ ] Enter key works on title screen"
        echo "  - [ ] Volume controls functional"
        echo "  - [ ] Combat system works"
        echo "  - [ ] No performance issues"
        echo ""
        echo "✅ Ready to create PR to dev when testing complete!"