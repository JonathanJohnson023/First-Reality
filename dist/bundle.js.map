{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/char.js","webpack:///./src/game.js","webpack:///./src/game_view.js","webpack:///./src/index.js","webpack:///./src/menu.js","webpack:///./src/monster.js","webpack:///./src/tutorial.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,+BAA+B,YAAY,KAAK,eAAe;;AAE/D;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,6B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,uDAAuD;AACvD;;AAEA;AACA;AACA;AACA,6CAA6C,OAAO;AACpD,KAAK;AACL,2BAA2B,OAAO,sCAAsC,eAAe;AACvF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC,OAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,uCAAuC,IAAI;AAC3C;;;AAGA,C;;;;;;;;;;;;AC1HA;AAAA;AAAA;AAAA;AAAA;AAA2B;AACI;AACN;AACV;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,6CAAI;AAC7B;AACA,qCAAqC;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,uBAAuB,6CAAM;AAC7B,uBAAuB,6CAAM;AAC7B,uBAAuB,6CAAM;AAC7B,uBAAuB,6CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,mCAAmC;AAC9E,iDAAiD,mCAAmC;AACpF;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B,MAAM;AACnC;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,oDAAoD;AACpD,yBAAyB,WAAW;AACpC;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,oBAAoB;AAC3C,0BAA0B,gDAAO;AACjC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;AAIA,C;;;;;;;;;;;;ACzQA;AAAA;AAAe;AACf,yC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,2CAA2C,8BAA8B;AACzE,iDAAiD,8BAA8B;;AAE/E;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2B;AACA;AACA;AACA,OAAO,GAAG,WAAW;AACrB;;AAEA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA,C;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACD;AACY;AACH;;;AAGlC;AACA,wBAAwB,6CAAI;AAC5B,uBAAuB,iDAAY;AACnC;AACA;AACA;AACA,sBAAsB,6CAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAQ;;AAEjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,CAAC,E;;;;;;;;;;;;AClDD;AAAA;AAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mDAAmD;AACnD;;AAEA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;;AAEA,kDAAkD,WAAW;;AAE7D;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,KAAK,0BAA0B;AAC/B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,mDAAmD;AACnD,sD;AACA;;AAEA;AACA;AACA;;AAEA,C;;;;;;;;;;;;ACvEA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6CAA6C;AAC7C,KAAK;AACL,6CAA6C;AAC7C,KAAK;AACL,6CAA6C;AAC7C;;AAEA,yCAAyC,eAAe;AACxD,iCAAiC,YAAY,KAAK,eAAe;;AAEjE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;;AAEA;AACA;AACA;AACA;;AAEA,uDAAuD;AACvD;;AAEA;AACA;AACA;AACA,qBAAqB,WAAW,oCAAoC,OAAO;AAC3E,KAAK;AACL,mCAAmC,OAAO,aAAa,WAAW,IAAI,WAAW,WAAW,cAAc;AAC1G;;AAEA;AACA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;AACA,uCAAuC,IAAI;AAC3C;;AAEA;;;;;;;;;;;;;;;;AClGA;AAAA;AAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA,C","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","export default class Character {\n  constructor(job, ctx, sprite, index){\n    this.level = 1;\n    this.maxHealth = 100\n    this.health = this.maxHealth;\n    this.KO = false;\n    this.job = job;\n    this.ctx = ctx;\n    this.sprite = sprite;\n    this.index = index;\n    this.frame = 0;\n    this.forward = false;\n    this.back = false;\n    this.partyHpUi = document.getElementById(\"party-ui\").getContext(\"2d\");\n    this.partyHpUi.font = \"26px Final Fantasy\";\n    this.spriteHeight(index);\n    this.canvasX = this.ctx.canvas.width * 0.85;\n    this.canvasY = this.ctx.canvas.height * this.heightFloat + this.ctx.canvas.height * 0.3;\n\n  }\n\n  isOdd(n){\n    return Math.abs(n % 2) == 1;\n  }\n\n  draw(callback){\n    if(this.forward && this.frame <= 9){\n      this.walkForward(callback);\n    }else if(this.back && this.frame >= 1 ){\n      this.walkBack();\n    }else{\n      this.ctx.drawImage(this.sprite, 0, 0, 64, 64, this.canvasX, this.canvasY , 125, 125 )\n    }\n    this.partyHpUi.clearRect(0, (this.index) * (this.partyHpUi.canvas.height / 4), this.partyHpUi.canvas.width, this.partyHpUi.canvas.height)\n    this.partyHpUi.fillText(this.job, 25, (this.index + 1) * (this.partyHpUi.canvas.height / 4))\n    this.partyHpUi.fillText(`${this.health} / ${this.maxHealth}`, this.partyHpUi.canvas.width - 125, (this.index + 1) * (this.partyHpUi.canvas.height / 4))\n\n  }\n\n  walkForward(callback){\n    this.frame++\n    if(this.isOdd(this.frame)){\n      this.ctx.drawImage(this.sprite, 64, 0, 64, 64, this.canvasX -= parseInt(this.frame + \"0\"), this.canvasY , 125, 125 )\n    }else if(this.frame <= 9){\n      this.ctx.drawImage(this.sprite, 0, 0, 64, 64, this.canvasX -= parseInt(this.frame + \"0\"), this.canvasY , 125, 125 )\n    }\n    if (this.frame == 10){\n        callback()\n    }\n\n  }\n\n  walkBack(){\n    this.frame--\n      if(this.isOdd(this.frame)){\n        this.ctx.drawImage(this.sprite, 64, 0, 64, 64, this.canvasX += parseInt(this.frame + \"0\"), this.canvasY , 125, 125 )\n      }else if(this.frame >= 1){\n        this.ctx.drawImage(this.sprite, 0, 0, 64, 64, this.canvasX += parseInt(this.frame + \"0\"), this.canvasY , 125, 125 )\n      }\n  }\n\n  // walkingCaller(callback){ \n  //     if( this.frame < 10 ){\n  //       this.walkForward(callback);\n  //     }else if( this.frame > 0){\n  //       this.walkBack(callback);\n  //     }\n  // }\n\n  attack(monster){\n    if (monster.health <= 0) {\n      console.log('Monster is already dead!');\n      return;\n    }\n    \n    const damage = Math.floor(Math.random() * 30) + 15; // 15-45 damage\n    monster.health -= damage;\n    \n    if (monster.health <= 0) {\n      monster.health = 0;\n      monster.KO = true;\n      console.log(`Monster defeated! Dealt ${damage} damage.`);\n    } else {\n      console.log(`Dealt ${damage} damage to monster. Monster health: ${monster.health}`);\n    }\n    \n    // Add visual feedback\n    this.showDamage(damage);\n  }\n  \n  showDamage(damage) {\n    // Create damage text element\n    const damageText = document.createElement('div');\n    damageText.textContent = `-${damage}`;\n    damageText.style.position = 'absolute';\n    damageText.style.color = '#ff4444';\n    damageText.style.fontSize = '24px';\n    damageText.style.fontWeight = 'bold';\n    damageText.style.zIndex = '1000';\n    damageText.style.pointerEvents = 'none';\n    damageText.style.left = '50%';\n    damageText.style.top = '30%';\n    damageText.style.transform = 'translateX(-50%)';\n    damageText.style.animation = 'damageFloat 1.5s ease-out forwards';\n    \n    document.body.appendChild(damageText);\n    \n    // Remove after animation\n    setTimeout(() => {\n      if (damageText.parentNode) {\n        damageText.parentNode.removeChild(damageText);\n      }\n    }, 1500);\n  }\n\n  spriteHeight(int){\n    let numFloat = int + int * 0.5\n    let num = Number(numFloat.toString().replace('.',''))\n    this.heightFloat = parseFloat(`0.${num}`)\n  }\n\n\n}","import Sprite from \"./char\"\nimport Monster from \"./monster\"\nimport Menu from \"./menu\"\nexport default class Game {\n  constructor(ctx){\n    this.party = [];\n    this.enemies = [];\n    this.wave = 0;\n    this.currentChar = null;\n    this.currentCharIndex = 0;\n    this.ctx = ctx;\n    this.frame = 0;\n    this.aniDone = false;\n    this.partyMenu = new Menu(\"#party-moves li\", \"party-moves\");\n    this.wave = 0;\n    this.battleState = 'player-turn'; // 'player-turn', 'enemy-turn', 'victory', 'defeat'\n    this.turnQueue = [];\n    this.currentTurn = 0;\n    this.actionInProgress = false;\n\n    this.draw = this.draw.bind(this);\n    this.charIndexIncrease = this.charIndexIncrease.bind(this);\n    this.processTurn = this.processTurn.bind(this);\n  }\n\n  draw(){\n    this.currentChar = this.party[this.currentCharIndex]\n    this.ctx.width  = window.innerWidth;\n    this.ctx.height = window.innerHeight;\n    this.ctx.clearRect(0, 0, this.ctx.width, this.ctx.height);\n    this.ctx.fillStyle = \"black\";\n    this.ctx.fillRect(0, 0, this.ctx.width, this.ctx.height);\n    \n    this.drawBackground();\n    this.addSprites();\n    this.drawMonsters();\n    document.body.addEventListener(\"animationend\" , () => {\n      document.body.style.backgroundColor = \"black\";\n      this.aniDone = true;\n       if(this.currentChar) this.currentChar.forward = true;\n    })\n  }\n\n  start(titleMenu){\n    const knight = new Sprite(\"Knight\", this.ctx, null, 0);\n    const cleric = new Sprite(\"Cleric\", this.ctx, null, 1);\n    const archer = new Sprite(\"Archer\", this.ctx, null, 2);\n    const wizard = new Sprite(\"Wizard\", this.ctx, null, 3);\n    this.party.push(knight, cleric, archer, wizard);\n    this.addEnemy()\n    // this.createMonsters();\n    // document.removeEventListener(\"keydown\")\n    const menu = document.getElementById(\"party-moves\");\n    menu.addEventListener('mouseover', this.partyMenu.selectMouseOver);\n    menu.addEventListener('click', (e) => { this.partySelectEventCallback(e) });\n    document.addEventListener('keydown', (e) => { this.partySelectEventCallback(e) });\n    this.partyMenu.selection(0);\n\n  }\n\n  partySelectEventCallback(e){\n    const menu = document.getElementById(\"party-moves\");\n    if(e.keyCode == 13 && !menu.classList.contains(\"none\")){\n      this.onSelect(this.partyMenu.keyPressed(e));\n    }else if(e.type == \"click\"){\n      this.onSelect(this.partyMenu.selectMouseClick(e));\n    }else{\n      return this.partyMenu.keyPressed(e)\n    }\n  };\n  \n  drawBackground(){\n    const background = new Image()\n      background.src = \"battle_backgrounds.png\"\n    this.ctx.drawImage(background, 522, 5, 270, 155, 0, 0, this.ctx.width, this.ctx.height)\n  }\n\n  addSprites(){\n    this.party.forEach((obj, index) => {\n      let sprite = new Image();\n        sprite.src = `image${index}.png`;\n      obj.sprite = sprite;\n      obj.index = index;\n\n      obj.draw(this.charIndexIncrease);\n    })\n  }\n\n  drawMonsters(){\n    this.enemies.forEach((obj, index) => {\n      obj.draw();\n    })\n  }\n\n  onSelect(selection){\n    if (this.actionInProgress || this.battleState !== 'player-turn') {\n      return;\n    }\n    \n    this.actionInProgress = true;\n    const selectedAction = selection.innerText;\n    \n    if (selectedAction === 'Attack') {\n      this.performAttack();\n    } else if (selectedAction === 'Defend') {\n      this.performDefend();\n    }\n  }\n  \n  performAttack() {\n    // Find alive enemies\n    const aliveEnemies = this.enemies.filter(enemy => enemy.isAlive());\n    if (aliveEnemies.length === 0) {\n      this.checkBattleEnd();\n      return;\n    }\n    \n    // Attack random alive enemy\n    const targetEnemy = aliveEnemies[Math.floor(Math.random() * aliveEnemies.length)];\n    \n    this.currentChar.back = false;\n    this.currentChar.forward = true;\n    this.currentChar.attack(targetEnemy);\n    \n    // After attack animation, proceed to next turn\n    setTimeout(() => {\n      this.currentChar.back = true;\n      this.currentChar.forward = false;\n      this.actionInProgress = false;\n      this.nextTurn();\n    }, 1000);\n  }\n  \n  performDefend() {\n    console.log(`${this.currentChar.job} is defending!`);\n    // Defending reduces incoming damage by 50% for this turn\n    this.currentChar.defending = true;\n    \n    setTimeout(() => {\n      this.actionInProgress = false;\n      this.nextTurn();\n    }, 500);\n  }\n  \n  nextTurn() {\n    if (this.checkBattleEnd()) {\n      return;\n    }\n    \n    this.charIndexIncrease();\n    \n    // Check if all party members have acted\n    if (this.currentCharIndex === 0) {\n      this.battleState = 'enemy-turn';\n      this.enemyTurn();\n    }\n  }\n  \n  enemyTurn() {\n    const aliveEnemies = this.enemies.filter(enemy => enemy.isAlive());\n    const aliveParty = this.party.filter(char => !char.KO);\n    \n    if (aliveEnemies.length === 0 || aliveParty.length === 0) {\n      this.checkBattleEnd();\n      return;\n    }\n    \n    let enemyIndex = 0;\n    const enemyAttackInterval = setInterval(() => {\n      if (enemyIndex >= aliveEnemies.length) {\n        clearInterval(enemyAttackInterval);\n        // Reset defending status\n        this.party.forEach(char => char.defending = false);\n        this.battleState = 'player-turn';\n        return;\n      }\n      \n      const enemy = aliveEnemies[enemyIndex];\n      const target = aliveParty[Math.floor(Math.random() * aliveParty.length)];\n      \n      if (target && !target.KO) {\n        let damage = enemy.attack(target);\n        if (target.defending) {\n          damage = Math.floor(damage * 0.5);\n          target.health += Math.floor(damage * 0.5); // Restore half damage\n          console.log(`${target.job} defended and reduced damage!`);\n        }\n      }\n      \n      enemyIndex++;\n    }, 1000);\n  }\n  \n  checkBattleEnd() {\n    const aliveEnemies = this.enemies.filter(enemy => enemy.isAlive());\n    const aliveParty = this.party.filter(char => !char.KO && char.health > 0);\n    \n    if (aliveEnemies.length === 0) {\n      this.battleState = 'victory';\n      console.log('Victory! All enemies defeated!');\n      this.showVictoryScreen();\n      return true;\n    }\n    \n    if (aliveParty.length === 0) {\n      this.battleState = 'defeat';\n      console.log('Defeat! All party members have fallen!');\n      this.showDefeatScreen();\n      return true;\n    }\n    \n    return false;\n  }\n  \n  showVictoryScreen() {\n    // Add victory screen logic\n    setTimeout(() => {\n      alert('Victory! You defeated all enemies!');\n      this.resetBattle();\n    }, 1000);\n  }\n  \n  showDefeatScreen() {\n    // Add defeat screen logic\n    setTimeout(() => {\n      alert('Defeat! Game Over!');\n      this.resetBattle();\n    }, 1000);\n  }\n  \n  resetBattle() {\n    // Reset party health\n    this.party.forEach(char => {\n      char.health = char.maxHealth;\n      char.KO = false;\n      char.defending = false;\n    });\n    \n    // Generate new enemies\n    this.enemies = [];\n    this.addEnemy();\n    \n    this.currentCharIndex = 0;\n    this.battleState = 'player-turn';\n    this.actionInProgress = false;\n  }\n\n  addEnemy(){\n    const numEnemies = Math.floor(Math.random() * 4) + 1\n    for (let index = 0; index < numEnemies; index++){\n      const monster = new Monster(this.ctx, index);\n      this.enemies.push(monster)\n    }\n\n  }\n\n  charIndexIncrease(){\n    // Skip KO'd characters\n    do {\n      this.currentCharIndex >= 3 ? this.currentCharIndex = 0 : this.currentCharIndex++;\n    } while (this.party[this.currentCharIndex] && this.party[this.currentCharIndex].KO);\n  }\n  \n\n\n}","export default class GameRouter {\n  constructor(menu,game,tutorial,canvas){  \n    this.menu = menu;\n    this.game = game;\n    this.tutorial = tutorial;\n    this.ctx = canvas.getContext(\"2d\");\n    this.menuCtx = canvas.getContext(\"2d\")\n    this.lastTime = 0;\n    this.title = document.getElementById(\"title-screen-text-wrapper\")\n    this.time = 0\n  }\n\n\n  start(){\n    const menu = document.getElementById(\"menu\")\n    menu.addEventListener('mouseover', this.menu.selectMouseOver)\n    menu.addEventListener('click', (e) => { this.selectEventCallback(e) })\n    document.addEventListener('keydown', (e) => { this.selectEventCallback(e) })\n\n  }\n\n  selectEventCallback(e){\n    const menu = document.getElementById(\"menu\")\n    if(e.keyCode == 13 && !menu.classList.contains(\"none\")){\n      this.select(this.menu.keyPressed(e))\n    }else if(e.type == \"click\"){\n      this.select(this.menu.selectMouseClick(e))\n    }else{\n      return this.menu.keyPressed(e)\n    }\n  }\n\n  select(selection){\n    if (selection.innerText === \"Start Game\" ) {\n      const titleAudio = document.getElementById(\"title-audio\")\n      this.title.classList.remove(\"appearing\");\n      this.title.classList.add(\"disappearing\");\n      titleAudio.volume = 0.3\n      this.game.ctx = this.ctx\n      \n      this.title.addEventListener(\"animationend\", () => {\n        this.title.classList.add(\"none\");\n        titleAudio.pause();      \n        document.getElementById(\"battleView\").classList.remove(\"none\");\n        this.game.start(this.menu);\n      }, {once: true})\n      requestAnimationFrame(this.gameAnimate.bind(this));\n\n    }else if(selection.innerText === \"How To Play\"){\n      const menu = new Menu(\"\")\n      this.tutorial.start(menu)\n    }else{\n    }\n    // this.game.onSelect()\n  }\n\n  gameAnimate(time) {\n    // const timeDelta = time - this.lastTime;\n    this.time++\n    // this.game.step(timeDelta);\n    if(this.time > 17){\n      if(this.game.aniDone){ \n        this.game.frame++\n      }\n      this.time = 0\n      this.game.draw();\n    }\n    // this.game.drawBackground(this.ctx);\n    this.lastTime = time;\n\n    // every call to animate requests causes another call to animate\n    requestAnimationFrame(this.gameAnimate.bind(this));\n  };\n\n\n}","import Menu from \"./menu\";\nimport Game from \"./game\"\nimport Instructions from \"./tutorial\"\nimport GameView from \"./game_view\"\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const menuClass = new Menu('#menu li', \"menu\");\n  const tutorial = new Instructions;\n  const canvas = document.getElementById(\"battle-view\");\n  const enemiesUi = document.getElementById(\"enemies-ui\");\n  const partyUi = document.getElementById(\"party-ui\");\n  const theGame = new Game(canvas);\n  canvas.width  = window.innerWidth * 0.85;\n  canvas.height = window.innerHeight * 0.80;\n  enemiesUi.width  = (canvas.width - 50) * 0.3;\n  enemiesUi.height = window.innerHeight - canvas.height - 50;\n  partyUi.width  = (canvas.width - 50) * 0.3;\n  partyUi.height = window.innerHeight - canvas.height - 50;\n  const gameRouter = new GameView(menuClass, theGame, tutorial, canvas, enemiesUi, partyUi)\n\n  let i = 0\n  let titleScreenBool = true\n  menuClass.selection(0);\n\n  if(titleScreenBool){\n    let titleScreen = document.getElementById(\"press-start\")\n    titleScreen.addEventListener(\"animationend\", function(){\n      console.log(\"remounted\")\n      titleScreenBool = false\n      document.body.addEventListener('keydown', function(e){\n        if(e.keyCode == 13){\n          titleScreen.classList.remove(\"title-screen-appearing\");\n          menuClass.cursorSelect.play()\n          titleScreen.classList.add(\"title-screen-disappear\");\n        }\n      })\n    })\n    titleScreen.addEventListener(\"animationend\", function(){\n      i += 1\n      if(i === 1){ return }\n      document.getElementById(\"title-screen-controller\").classList.add(\"none\");\n      gameRouter.start()\n      document.getElementById(\"title-screen-menu\").classList.remove(\"none\");\n      let titleMusic = document.getElementById(\"title-audio\")\n      titleMusic.volume = 0.3\n      titleMusic.play();\n    })\n  }\n\n});","export default class Menu {\n  constructor(querySelec, menuId){\n    this.tokenMenu = 0\n    this.menuId = menuId\n\n    this.cursor = document.createElement('img');\n      this.cursor.className = 'selected';\n      this.cursor.src = 'https://www.dropbox.com/s/1pq4d1ksjv3tuoz/FF7Cursor.png?raw=1';\n\n    this.divShadow = document.createElement('div'); //shadow of the hand cursor.\n      this.divShadow.className = 'shadow';\n\n    this.cursorMove = new Audio(); //move sound.\n      this.cursorMove.src =\"https://www.dropbox.com/s/fiyx4q2mdwynraj/FF7CursorMove.mp3?raw=1\";\n      this.cursorMove.volume = 0.4\n      \n    this.cursorSelect = new Audio();\n      this.cursorSelect.src = 'https://www.dropbox.com/s/v04ewrevpnnsz03/FF7CursorSaveLoad.mp3?raw=1';\n      this.cursorSelect.volume = 0.4\n\n    this.menuItems = document.querySelectorAll(`${querySelec}`);\n\n    this.selectMouseOver = this.selectMouseOver.bind(this);\n    this.keyPressed = this.keyPressed.bind(this);\n    this.selectMouseClick = this.selectMouseClick.bind(this);\n\n  }\n\n  selectMouseOver(e){\n    e.preventDefault();\n    if(e.target.parentNode.id == this.menuId){\n      this.tokenMenu = parseInt(e.target.getAttribute(\"number\"));\n      this.selection(this.tokenMenu);\n      this.cursorMove.play();\n    }\n  }\n\n  selectMouseClick(e){\n    e.preventDefault();\n    if(e.target.parentNode.id == this.menuId){\n      this.tokenMenu = parseInt(e.target.getAttribute(\"number\"));\n      this.cursorSelect.play();\n      return this.menuItems[this.tokenMenu]\n    }\n  }\n\n  keyPressed(e){\n    e.preventDefault();\n    if(e.keyCode == 38){  //ArrowUp\n      this.tokenMenu > 0 ? this.tokenMenu -=1 : this.tokenMenu = 1\n      this.selection(this.tokenMenu);\n      this.cursorMove.play();\n    } else if(e.keyCode == 40){ //ArrowDown\n      this.tokenMenu < 1 ? this.tokenMenu +=1 : this.tokenMenu = 0\n      this.selection(this.tokenMenu);\n      this.cursorMove.play();\n    } else if(e.keyCode == 13){\n      this.cursorSelect.play();\n      return this.menuItems[this.tokenMenu]\n    }\n  }\n\n  selection(tokenMenu){\n    this.menuItems[tokenMenu].prepend(this.cursor); //Prepend element before the selected target.\n    this.menuItems[tokenMenu].prepend(this.divShadow); \n  }\n\n  select(selectedNumber){\n    return this.menuItems[selectedNumber]\n  }\n\n}","export default class Monster {\n  constructor(ctx, index){\n    this.level = 1;\n    this.maxHealth = 100;\n    this.health = this.maxHealth;\n    this.KO = false;\n    // this.type = type;\n    this.ctx = ctx;\n    this.sprite = new Image();\n      this.sprite.src = \"Final_Fantasy_1_Enemies & Bosses.png\"\n    this.index = index;\n    this.frame = 0;\n    this.monsterHpUi = document.getElementById(\"enemies-ui\").getContext(\"2d\");\n    this.monsterHpUi.font = \"26px Final Fantasy\";\n    this.spriteHeight(index)\n    this.canvasX = this.ctx.canvas.width / 8\n    this.canvasY = this.ctx.canvas.height * this.heightFloat + this.ctx.canvas.height / 3.5 \n\n    this.smallMonsters = [\n      [0, 0, 36, 64]\n    ]\n\n    this.medMonsters = [\n\n    ]\n\n  };\n\n\n  draw(){\n    // Only draw if alive\n    if (!this.KO && this.health > 0) {\n      this.ctx.drawImage(this.sprite, ...this.smallMonsters[0], this.canvasX, this.canvasY, 125, 200);\n    } else {\n      // Draw grayed out or don't draw at all\n      this.ctx.save();\n      this.ctx.globalAlpha = 0.3;\n      this.ctx.drawImage(this.sprite, ...this.smallMonsters[0], this.canvasX, this.canvasY, 125, 200);\n      this.ctx.restore();\n    }\n    \n    this.monsterHpUi.clearRect(0, (this.index) * (this.monsterHpUi.canvas.height / 4), this.monsterHpUi.canvas.width, this.monsterHpUi.canvas.height);\n    \n    // Color code the health text\n    const healthPercent = this.health / this.maxHealth;\n    if (healthPercent > 0.6) {\n      this.monsterHpUi.fillStyle = '#00ff00'; // Green\n    } else if (healthPercent > 0.3) {\n      this.monsterHpUi.fillStyle = '#ffff00'; // Yellow\n    } else {\n      this.monsterHpUi.fillStyle = '#ff0000'; // Red\n    }\n    \n    this.monsterHpUi.fillText(`Monster ${this.index + 1}`, 25, (this.index + 1) * (this.monsterHpUi.canvas.height / 4));\n    this.monsterHpUi.fillText(`${this.health} / ${this.maxHealth}`, this.monsterHpUi.canvas.width - 125, (this.index + 1) * (this.monsterHpUi.canvas.height / 4));\n    \n    // Reset color\n    this.monsterHpUi.fillStyle = '#ffffff';\n  }\n\n  death(){\n    this.KO = true;\n    this.health = 0;\n    // Add death animation or effects here\n    console.log(`Monster ${this.index + 1} has been defeated!`);\n  }\n  \n  attack(target) {\n    if (this.KO || this.health <= 0) {\n      return;\n    }\n    \n    const damage = Math.floor(Math.random() * 20) + 10; // 10-30 damage\n    target.health -= damage;\n    \n    if (target.health <= 0) {\n      target.health = 0;\n      target.KO = true;\n      console.log(`${target.job} has been defeated! Monster dealt ${damage} damage.`);\n    } else {\n      console.log(`Monster dealt ${damage} damage to ${target.job}. ${target.job} health: ${target.health}`);\n    }\n    \n    return damage;\n  }\n  \n  isAlive() {\n    return !this.KO && this.health > 0;\n  }\n\n\n\n  spriteHeight(int){\n    let numFloat = int + int * 0.5\n    let num = Number(numFloat.toString().replace('.',''))\n    this.heightFloat = parseFloat(`0.${num}`)\n  }\n\n}\n\n\n\n","export default class Tutorial{\n  constructor(menu){\n    this.menu = menu\n  }\n\n  start(){\n    console.log(this.menu)\n    this.menu\n  }\n\n  \n}"],"sourceRoot":""}